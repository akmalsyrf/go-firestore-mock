// Code generated by MockGen. DO NOT EDIT.
// Source: document_snapshot.go
//
// Generated by this command:
//
//	mockgen -source=document_snapshot.go -destination=document_snapshot_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	reflect "reflect"
	time "time"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentSnapshot is a mock of DocumentSnapshot interface.
type MockDocumentSnapshot struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentSnapshotMockRecorder
}

// MockDocumentSnapshotMockRecorder is the mock recorder for MockDocumentSnapshot.
type MockDocumentSnapshotMockRecorder struct {
	mock *MockDocumentSnapshot
}

// NewMockDocumentSnapshot creates a new mock instance.
func NewMockDocumentSnapshot(ctrl *gomock.Controller) *MockDocumentSnapshot {
	mock := &MockDocumentSnapshot{ctrl: ctrl}
	mock.recorder = &MockDocumentSnapshotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentSnapshot) EXPECT() *MockDocumentSnapshotMockRecorder {
	return m.recorder
}

// CreateTime mocks base method.
func (m *MockDocumentSnapshot) CreateTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreateTime indicates an expected call of CreateTime.
func (mr *MockDocumentSnapshotMockRecorder) CreateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTime", reflect.TypeOf((*MockDocumentSnapshot)(nil).CreateTime))
}

// Data mocks base method.
func (m *MockDocumentSnapshot) Data() map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockDocumentSnapshotMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockDocumentSnapshot)(nil).Data))
}

// DataAt mocks base method.
func (m *MockDocumentSnapshot) DataAt(path string) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataAt", path)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DataAt indicates an expected call of DataAt.
func (mr *MockDocumentSnapshotMockRecorder) DataAt(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataAt", reflect.TypeOf((*MockDocumentSnapshot)(nil).DataAt), path)
}

// DataTo mocks base method.
func (m *MockDocumentSnapshot) DataTo(p any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataTo", p)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataTo indicates an expected call of DataTo.
func (mr *MockDocumentSnapshotMockRecorder) DataTo(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataTo", reflect.TypeOf((*MockDocumentSnapshot)(nil).DataTo), p)
}

// Exists mocks base method.
func (m *MockDocumentSnapshot) Exists() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockDocumentSnapshotMockRecorder) Exists() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDocumentSnapshot)(nil).Exists))
}

// ReadTime mocks base method.
func (m *MockDocumentSnapshot) ReadTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ReadTime indicates an expected call of ReadTime.
func (mr *MockDocumentSnapshotMockRecorder) ReadTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTime", reflect.TypeOf((*MockDocumentSnapshot)(nil).ReadTime))
}

// Ref mocks base method.
func (m *MockDocumentSnapshot) Ref() *firestore.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ref")
	ret0, _ := ret[0].(*firestore.DocumentRef)
	return ret0
}

// Ref indicates an expected call of Ref.
func (mr *MockDocumentSnapshotMockRecorder) Ref() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ref", reflect.TypeOf((*MockDocumentSnapshot)(nil).Ref))
}

// UpdateTime mocks base method.
func (m *MockDocumentSnapshot) UpdateTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// UpdateTime indicates an expected call of UpdateTime.
func (mr *MockDocumentSnapshotMockRecorder) UpdateTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTime", reflect.TypeOf((*MockDocumentSnapshot)(nil).UpdateTime))
}
