// Code generated by MockGen. DO NOT EDIT.
// Source: internal/providers/firestore/client.go
//
// Generated by this command:
//
//	mockgen -source=internal/providers/firestore/client.go -destination=internal/providers/firestore/client_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockFirestoreClient is a mock of FirestoreClient interface.
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient.
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance.
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockFirestoreClient) Batch() *firestore.WriteBatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch")
	ret0, _ := ret[0].(*firestore.WriteBatch)
	return ret0
}

// Batch indicates an expected call of Batch.
func (mr *MockFirestoreClientMockRecorder) Batch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockFirestoreClient)(nil).Batch))
}

// BulkWriter mocks base method.
func (m *MockFirestoreClient) BulkWriter(ctx context.Context) BulkWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkWriter", ctx)
	ret0, _ := ret[0].(BulkWriter)
	return ret0
}

// BulkWriter indicates an expected call of BulkWriter.
func (mr *MockFirestoreClientMockRecorder) BulkWriter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkWriter", reflect.TypeOf((*MockFirestoreClient)(nil).BulkWriter), ctx)
}

// Close mocks base method.
func (m *MockFirestoreClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFirestoreClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFirestoreClient)(nil).Close))
}

// Collection mocks base method.
func (m *MockFirestoreClient) Collection(path string) CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", path)
	ret0, _ := ret[0].(CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockFirestoreClientMockRecorder) Collection(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockFirestoreClient)(nil).Collection), path)
}

// Doc mocks base method.
func (m *MockFirestoreClient) Doc(path string) DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", path)
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockFirestoreClientMockRecorder) Doc(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockFirestoreClient)(nil).Doc), path)
}

// RunTransaction mocks base method.
func (m *MockFirestoreClient) RunTransaction(ctx context.Context, f func(context.Context, *firestore.Transaction) error, opts ...firestore.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockFirestoreClientMockRecorder) RunTransaction(ctx, f any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockFirestoreClient)(nil).RunTransaction), varargs...)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Documents mocks base method.
func (m *MockQuery) Documents(ctx context.Context) DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx)
	ret0, _ := ret[0].(DocumentIterator)
	return ret0
}

// Documents indicates an expected call of Documents.
func (mr *MockQueryMockRecorder) Documents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockQuery)(nil).Documents), ctx)
}

// Where mocks base method.
func (m *MockQuery) Where(path, op string, value any) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Where", path, op, value)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockQueryMockRecorder) Where(path, op, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockQuery)(nil).Where), path, op, value)
}
