// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=client_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockFirestoreClient is a mock of FirestoreClient interface.
type MockFirestoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockFirestoreClientMockRecorder
}

// MockFirestoreClientMockRecorder is the mock recorder for MockFirestoreClient.
type MockFirestoreClientMockRecorder struct {
	mock *MockFirestoreClient
}

// NewMockFirestoreClient creates a new mock instance.
func NewMockFirestoreClient(ctrl *gomock.Controller) *MockFirestoreClient {
	mock := &MockFirestoreClient{ctrl: ctrl}
	mock.recorder = &MockFirestoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirestoreClient) EXPECT() *MockFirestoreClientMockRecorder {
	return m.recorder
}

// Batch mocks base method.
func (m *MockFirestoreClient) Batch() WriteBatch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Batch")
	ret0, _ := ret[0].(WriteBatch)
	return ret0
}

// Batch indicates an expected call of Batch.
func (mr *MockFirestoreClientMockRecorder) Batch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockFirestoreClient)(nil).Batch))
}

// BulkWriter mocks base method.
func (m *MockFirestoreClient) BulkWriter(ctx context.Context) BulkWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BulkWriter", ctx)
	ret0, _ := ret[0].(BulkWriter)
	return ret0
}

// BulkWriter indicates an expected call of BulkWriter.
func (mr *MockFirestoreClientMockRecorder) BulkWriter(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BulkWriter", reflect.TypeOf((*MockFirestoreClient)(nil).BulkWriter), ctx)
}

// Close mocks base method.
func (m *MockFirestoreClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFirestoreClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFirestoreClient)(nil).Close))
}

// Collection mocks base method.
func (m *MockFirestoreClient) Collection(path string) CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", path)
	ret0, _ := ret[0].(CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockFirestoreClientMockRecorder) Collection(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockFirestoreClient)(nil).Collection), path)
}

// CollectionGroup mocks base method.
func (m *MockFirestoreClient) CollectionGroup(collectionID string) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectionGroup", collectionID)
	ret0, _ := ret[0].(Query)
	return ret0
}

// CollectionGroup indicates an expected call of CollectionGroup.
func (mr *MockFirestoreClientMockRecorder) CollectionGroup(collectionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectionGroup", reflect.TypeOf((*MockFirestoreClient)(nil).CollectionGroup), collectionID)
}

// Collections mocks base method.
func (m *MockFirestoreClient) Collections(ctx context.Context) CollectionIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections", ctx)
	ret0, _ := ret[0].(CollectionIterator)
	return ret0
}

// Collections indicates an expected call of Collections.
func (mr *MockFirestoreClientMockRecorder) Collections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockFirestoreClient)(nil).Collections), ctx)
}

// Doc mocks base method.
func (m *MockFirestoreClient) Doc(path string) DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", path)
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockFirestoreClientMockRecorder) Doc(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockFirestoreClient)(nil).Doc), path)
}

// GetAll mocks base method.
func (m *MockFirestoreClient) GetAll(ctx context.Context, docRefs []*firestore.DocumentRef) ([]DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, docRefs)
	ret0, _ := ret[0].([]DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockFirestoreClientMockRecorder) GetAll(ctx, docRefs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockFirestoreClient)(nil).GetAll), ctx, docRefs)
}

// RunTransaction mocks base method.
func (m *MockFirestoreClient) RunTransaction(ctx context.Context, f func(context.Context, Transaction) error, opts ...firestore.TransactionOption) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RunTransaction", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockFirestoreClientMockRecorder) RunTransaction(ctx, f any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockFirestoreClient)(nil).RunTransaction), varargs...)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Documents mocks base method.
func (m *MockQuery) Documents(ctx context.Context) DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx)
	ret0, _ := ret[0].(DocumentIterator)
	return ret0
}

// Documents indicates an expected call of Documents.
func (mr *MockQueryMockRecorder) Documents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockQuery)(nil).Documents), ctx)
}

// EndAt mocks base method.
func (m *MockQuery) EndAt(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndAt", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// EndAt indicates an expected call of EndAt.
func (mr *MockQueryMockRecorder) EndAt(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndAt", reflect.TypeOf((*MockQuery)(nil).EndAt), docSnapshotOrFieldValues...)
}

// EndBefore mocks base method.
func (m *MockQuery) EndBefore(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndBefore", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// EndBefore indicates an expected call of EndBefore.
func (mr *MockQueryMockRecorder) EndBefore(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBefore", reflect.TypeOf((*MockQuery)(nil).EndBefore), docSnapshotOrFieldValues...)
}

// Limit mocks base method.
func (m *MockQuery) Limit(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockQueryMockRecorder) Limit(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockQuery)(nil).Limit), n)
}

// LimitToLast mocks base method.
func (m *MockQuery) LimitToLast(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitToLast", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// LimitToLast indicates an expected call of LimitToLast.
func (mr *MockQueryMockRecorder) LimitToLast(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitToLast", reflect.TypeOf((*MockQuery)(nil).LimitToLast), n)
}

// NewAggregationQuery mocks base method.
func (m *MockQuery) NewAggregationQuery() AggregationQuery {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAggregationQuery")
	ret0, _ := ret[0].(AggregationQuery)
	return ret0
}

// NewAggregationQuery indicates an expected call of NewAggregationQuery.
func (mr *MockQueryMockRecorder) NewAggregationQuery() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAggregationQuery", reflect.TypeOf((*MockQuery)(nil).NewAggregationQuery))
}

// Offset mocks base method.
func (m *MockQuery) Offset(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockQueryMockRecorder) Offset(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockQuery)(nil).Offset), n)
}

// OrderBy mocks base method.
func (m *MockQuery) OrderBy(path string, dir firestore.Direction) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderBy", path, dir)
	ret0, _ := ret[0].(Query)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockQueryMockRecorder) OrderBy(path, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockQuery)(nil).OrderBy), path, dir)
}

// Select mocks base method.
func (m *MockQuery) Select(paths ...string) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockQueryMockRecorder) Select(paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockQuery)(nil).Select), paths...)
}

// Snapshots mocks base method.
func (m *MockQuery) Snapshots(ctx context.Context) QuerySnapshotIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(QuerySnapshotIterator)
	return ret0
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockQueryMockRecorder) Snapshots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockQuery)(nil).Snapshots), ctx)
}

// StartAfter mocks base method.
func (m *MockQuery) StartAfter(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAfter", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// StartAfter indicates an expected call of StartAfter.
func (mr *MockQueryMockRecorder) StartAfter(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAfter", reflect.TypeOf((*MockQuery)(nil).StartAfter), docSnapshotOrFieldValues...)
}

// StartAt mocks base method.
func (m *MockQuery) StartAt(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAt", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// StartAt indicates an expected call of StartAt.
func (mr *MockQueryMockRecorder) StartAt(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAt", reflect.TypeOf((*MockQuery)(nil).StartAt), docSnapshotOrFieldValues...)
}

// Where mocks base method.
func (m *MockQuery) Where(path, op string, value any) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Where", path, op, value)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockQueryMockRecorder) Where(path, op, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockQuery)(nil).Where), path, op, value)
}
