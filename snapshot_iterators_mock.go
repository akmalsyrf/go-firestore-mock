// Code generated by MockGen. DO NOT EDIT.
// Source: snapshot_iterators.go
//
// Generated by this command:
//
//	mockgen -source=snapshot_iterators.go -destination=snapshot_iterators_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerySnapshotIterator is a mock of QuerySnapshotIterator interface.
type MockQuerySnapshotIterator struct {
	ctrl     *gomock.Controller
	recorder *MockQuerySnapshotIteratorMockRecorder
}

// MockQuerySnapshotIteratorMockRecorder is the mock recorder for MockQuerySnapshotIterator.
type MockQuerySnapshotIteratorMockRecorder struct {
	mock *MockQuerySnapshotIterator
}

// NewMockQuerySnapshotIterator creates a new mock instance.
func NewMockQuerySnapshotIterator(ctrl *gomock.Controller) *MockQuerySnapshotIterator {
	mock := &MockQuerySnapshotIterator{ctrl: ctrl}
	mock.recorder = &MockQuerySnapshotIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerySnapshotIterator) EXPECT() *MockQuerySnapshotIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockQuerySnapshotIterator) Next() (*firestore.QuerySnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*firestore.QuerySnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockQuerySnapshotIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockQuerySnapshotIterator)(nil).Next))
}

// Stop mocks base method.
func (m *MockQuerySnapshotIterator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockQuerySnapshotIteratorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockQuerySnapshotIterator)(nil).Stop))
}

// MockCollectionIterator is a mock of CollectionIterator interface.
type MockCollectionIterator struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionIteratorMockRecorder
}

// MockCollectionIteratorMockRecorder is the mock recorder for MockCollectionIterator.
type MockCollectionIteratorMockRecorder struct {
	mock *MockCollectionIterator
}

// NewMockCollectionIterator creates a new mock instance.
func NewMockCollectionIterator(ctrl *gomock.Controller) *MockCollectionIterator {
	mock := &MockCollectionIterator{ctrl: ctrl}
	mock.recorder = &MockCollectionIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionIterator) EXPECT() *MockCollectionIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockCollectionIterator) Next() (*firestore.CollectionRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*firestore.CollectionRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockCollectionIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockCollectionIterator)(nil).Next))
}

// Stop mocks base method.
func (m *MockCollectionIterator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockCollectionIteratorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockCollectionIterator)(nil).Stop))
}

// MockDocumentSnapshotIterator is a mock of DocumentSnapshotIterator interface.
type MockDocumentSnapshotIterator struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentSnapshotIteratorMockRecorder
}

// MockDocumentSnapshotIteratorMockRecorder is the mock recorder for MockDocumentSnapshotIterator.
type MockDocumentSnapshotIteratorMockRecorder struct {
	mock *MockDocumentSnapshotIterator
}

// NewMockDocumentSnapshotIterator creates a new mock instance.
func NewMockDocumentSnapshotIterator(ctrl *gomock.Controller) *MockDocumentSnapshotIterator {
	mock := &MockDocumentSnapshotIterator{ctrl: ctrl}
	mock.recorder = &MockDocumentSnapshotIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentSnapshotIterator) EXPECT() *MockDocumentSnapshotIteratorMockRecorder {
	return m.recorder
}

// Next mocks base method.
func (m *MockDocumentSnapshotIterator) Next() (DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockDocumentSnapshotIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDocumentSnapshotIterator)(nil).Next))
}

// Stop mocks base method.
func (m *MockDocumentSnapshotIterator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockDocumentSnapshotIteratorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDocumentSnapshotIterator)(nil).Stop))
}
