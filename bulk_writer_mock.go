// Code generated by MockGen. DO NOT EDIT.
// Source: bulk_writer.go
//
// Generated by this command:
//
//	mockgen -source=bulk_writer.go -destination=bulk_writer_mock.go
//
// Package mock_firestore is a generated GoMock package.
package firestore

import (
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockBulkWriter is a mock of BulkWriter interface.
type MockBulkWriter struct {
	ctrl     *gomock.Controller
	recorder *MockBulkWriterMockRecorder
}

// MockBulkWriterMockRecorder is the mock recorder for MockBulkWriter.
type MockBulkWriterMockRecorder struct {
	mock *MockBulkWriter
}

// NewMockBulkWriter creates a new mock instance.
func NewMockBulkWriter(ctrl *gomock.Controller) *MockBulkWriter {
	mock := &MockBulkWriter{ctrl: ctrl}
	mock.recorder = &MockBulkWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBulkWriter) EXPECT() *MockBulkWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBulkWriter) Create(docRef *firestore.DocumentRef, data any) (*firestore.BulkWriterJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", docRef, data)
	ret0, _ := ret[0].(*firestore.BulkWriterJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBulkWriterMockRecorder) Create(docRef, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBulkWriter)(nil).Create), docRef, data)
}

// Delete mocks base method.
func (m *MockBulkWriter) Delete(docRef *firestore.DocumentRef, preconds ...firestore.Precondition) (*firestore.BulkWriterJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{docRef}
	for _, a := range preconds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*firestore.BulkWriterJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBulkWriterMockRecorder) Delete(docRef any, preconds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef}, preconds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBulkWriter)(nil).Delete), varargs...)
}

// End mocks base method.
func (m *MockBulkWriter) End() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "End")
}

// End indicates an expected call of End.
func (mr *MockBulkWriterMockRecorder) End() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockBulkWriter)(nil).End))
}

// Flush mocks base method.
func (m *MockBulkWriter) Flush() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Flush")
}

// Flush indicates an expected call of Flush.
func (mr *MockBulkWriterMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockBulkWriter)(nil).Flush))
}

// Set mocks base method.
func (m *MockBulkWriter) Set(docRef *firestore.DocumentRef, data any, opts ...firestore.SetOption) (*firestore.BulkWriterJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{docRef, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*firestore.BulkWriterJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockBulkWriterMockRecorder) Set(docRef, data any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockBulkWriter)(nil).Set), varargs...)
}

// Update mocks base method.
func (m *MockBulkWriter) Update(docRef *firestore.DocumentRef, updates []firestore.Update, preconds ...firestore.Precondition) (*firestore.BulkWriterJob, error) {
	m.ctrl.T.Helper()
	varargs := []any{docRef, updates}
	for _, a := range preconds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*firestore.BulkWriterJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBulkWriterMockRecorder) Update(docRef, updates any, preconds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef, updates}, preconds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBulkWriter)(nil).Update), varargs...)
}
