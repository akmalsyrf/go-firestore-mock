// Code generated by MockGen. DO NOT EDIT.
// Source: document_iterator.go
//
// Generated by this command:
//
//	mockgen -source=document_iterator.go -destination=document_iterator_mock.go
//
// Package mock_firestore is a generated GoMock package.
package firestore

import (
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentIterator is a mock of DocumentIterator interface.
type MockDocumentIterator struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentIteratorMockRecorder
}

// MockDocumentIteratorMockRecorder is the mock recorder for MockDocumentIterator.
type MockDocumentIteratorMockRecorder struct {
	mock *MockDocumentIterator
}

// NewMockDocumentIterator creates a new mock instance.
func NewMockDocumentIterator(ctrl *gomock.Controller) *MockDocumentIterator {
	mock := &MockDocumentIterator{ctrl: ctrl}
	mock.recorder = &MockDocumentIteratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentIterator) EXPECT() *MockDocumentIteratorMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockDocumentIterator) GetAll() ([]*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockDocumentIteratorMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockDocumentIterator)(nil).GetAll))
}

// Next mocks base method.
func (m *MockDocumentIterator) Next() (*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockDocumentIteratorMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockDocumentIterator)(nil).Next))
}

// Stop mocks base method.
func (m *MockDocumentIterator) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockDocumentIteratorMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockDocumentIterator)(nil).Stop))
}
