// Code generated by MockGen. DO NOT EDIT.
// Source: document.go
//
// Generated by this command:
//
//	mockgen -source=document.go -destination=document_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentRef is a mock of DocumentRef interface.
type MockDocumentRef struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRefMockRecorder
}

// MockDocumentRefMockRecorder is the mock recorder for MockDocumentRef.
type MockDocumentRefMockRecorder struct {
	mock *MockDocumentRef
}

// NewMockDocumentRef creates a new mock instance.
func NewMockDocumentRef(ctrl *gomock.Controller) *MockDocumentRef {
	mock := &MockDocumentRef{ctrl: ctrl}
	mock.recorder = &MockDocumentRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRef) EXPECT() *MockDocumentRefMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockDocumentRef) Collection(path string) CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collection", path)
	ret0, _ := ret[0].(CollectionRef)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockDocumentRefMockRecorder) Collection(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockDocumentRef)(nil).Collection), path)
}

// Collections mocks base method.
func (m *MockDocumentRef) Collections(ctx context.Context) *firestore.CollectionIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Collections", ctx)
	ret0, _ := ret[0].(*firestore.CollectionIterator)
	return ret0
}

// Collections indicates an expected call of Collections.
func (mr *MockDocumentRefMockRecorder) Collections(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collections", reflect.TypeOf((*MockDocumentRef)(nil).Collections), ctx)
}

// Create mocks base method.
func (m *MockDocumentRef) Create(ctx context.Context, data any) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, data)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDocumentRefMockRecorder) Create(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDocumentRef)(nil).Create), ctx, data)
}

// Delete mocks base method.
func (m *MockDocumentRef) Delete(ctx context.Context, opts ...firestore.Precondition) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDocumentRefMockRecorder) Delete(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDocumentRef)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockDocumentRef) Get(ctx context.Context) (*firestore.DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(*firestore.DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDocumentRefMockRecorder) Get(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDocumentRef)(nil).Get), ctx)
}

// ID mocks base method.
func (m *MockDocumentRef) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDocumentRefMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDocumentRef)(nil).ID))
}

// Parent mocks base method.
func (m *MockDocumentRef) Parent() *firestore.CollectionRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(*firestore.CollectionRef)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockDocumentRefMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockDocumentRef)(nil).Parent))
}

// Path mocks base method.
func (m *MockDocumentRef) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockDocumentRefMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockDocumentRef)(nil).Path))
}

// Reference mocks base method.
func (m *MockDocumentRef) Reference() *firestore.DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reference")
	ret0, _ := ret[0].(*firestore.DocumentRef)
	return ret0
}

// Reference indicates an expected call of Reference.
func (mr *MockDocumentRefMockRecorder) Reference() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reference", reflect.TypeOf((*MockDocumentRef)(nil).Reference))
}

// Set mocks base method.
func (m *MockDocumentRef) Set(ctx context.Context, data any, opts ...firestore.SetOption) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockDocumentRefMockRecorder) Set(ctx, data any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDocumentRef)(nil).Set), varargs...)
}

// Snapshots mocks base method.
func (m *MockDocumentRef) Snapshots(ctx context.Context) *firestore.DocumentSnapshotIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(*firestore.DocumentSnapshotIterator)
	return ret0
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockDocumentRefMockRecorder) Snapshots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockDocumentRef)(nil).Snapshots), ctx)
}

// Update mocks base method.
func (m *MockDocumentRef) Update(ctx context.Context, updates []firestore.Update, preconds ...firestore.Precondition) (*firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, updates}
	for _, a := range preconds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*firestore.WriteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDocumentRefMockRecorder) Update(ctx, updates any, preconds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, updates}, preconds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDocumentRef)(nil).Update), varargs...)
}
