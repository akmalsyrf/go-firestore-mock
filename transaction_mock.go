// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go
//
// Generated by this command:
//
//	mockgen -source=transaction.go -destination=transaction_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransaction) Create(docRef *firestore.DocumentRef, data any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", docRef, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTransactionMockRecorder) Create(docRef, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransaction)(nil).Create), docRef, data)
}

// Delete mocks base method.
func (m *MockTransaction) Delete(docRef *firestore.DocumentRef, preconds ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{docRef}
	for _, a := range preconds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTransactionMockRecorder) Delete(docRef any, preconds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef}, preconds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransaction)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockTransaction) Get(docRef *firestore.DocumentRef) (DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", docRef)
	ret0, _ := ret[0].(DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransactionMockRecorder) Get(docRef any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransaction)(nil).Get), docRef)
}

// GetAll mocks base method.
func (m *MockTransaction) GetAll(docRefs []*firestore.DocumentRef) ([]DocumentSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", docRefs)
	ret0, _ := ret[0].([]DocumentSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockTransactionMockRecorder) GetAll(docRefs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockTransaction)(nil).GetAll), docRefs)
}

// Set mocks base method.
func (m *MockTransaction) Set(docRef *firestore.DocumentRef, data any, opts ...firestore.SetOption) error {
	m.ctrl.T.Helper()
	varargs := []any{docRef, data}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockTransactionMockRecorder) Set(docRef, data any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef, data}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockTransaction)(nil).Set), varargs...)
}

// Update mocks base method.
func (m *MockTransaction) Update(docRef *firestore.DocumentRef, updates []firestore.Update, preconds ...firestore.Precondition) error {
	m.ctrl.T.Helper()
	varargs := []any{docRef, updates}
	for _, a := range preconds {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTransactionMockRecorder) Update(docRef, updates any, preconds ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{docRef, updates}, preconds...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransaction)(nil).Update), varargs...)
}
