// Code generated by MockGen. DO NOT EDIT.
// Source: collection.go
//
// Generated by this command:
//
//	mockgen -source=collection.go -destination=collection_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionRef is a mock of CollectionRef interface.
type MockCollectionRef struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRefMockRecorder
}

// MockCollectionRefMockRecorder is the mock recorder for MockCollectionRef.
type MockCollectionRefMockRecorder struct {
	mock *MockCollectionRef
}

// NewMockCollectionRef creates a new mock instance.
func NewMockCollectionRef(ctrl *gomock.Controller) *MockCollectionRef {
	mock := &MockCollectionRef{ctrl: ctrl}
	mock.recorder = &MockCollectionRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRef) EXPECT() *MockCollectionRefMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCollectionRef) Add(ctx context.Context, data any) (*firestore.DocumentRef, *firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, data)
	ret0, _ := ret[0].(*firestore.DocumentRef)
	ret1, _ := ret[1].(*firestore.WriteResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockCollectionRefMockRecorder) Add(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCollectionRef)(nil).Add), ctx, data)
}

// Doc mocks base method.
func (m *MockCollectionRef) Doc(id string) DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", id)
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockCollectionRefMockRecorder) Doc(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockCollectionRef)(nil).Doc), id)
}

// Documents mocks base method.
func (m *MockCollectionRef) Documents(ctx context.Context) DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx)
	ret0, _ := ret[0].(DocumentIterator)
	return ret0
}

// Documents indicates an expected call of Documents.
func (mr *MockCollectionRefMockRecorder) Documents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockCollectionRef)(nil).Documents), ctx)
}

// EndAt mocks base method.
func (m *MockCollectionRef) EndAt(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndAt", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// EndAt indicates an expected call of EndAt.
func (mr *MockCollectionRefMockRecorder) EndAt(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndAt", reflect.TypeOf((*MockCollectionRef)(nil).EndAt), docSnapshotOrFieldValues...)
}

// EndBefore mocks base method.
func (m *MockCollectionRef) EndBefore(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EndBefore", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// EndBefore indicates an expected call of EndBefore.
func (mr *MockCollectionRefMockRecorder) EndBefore(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndBefore", reflect.TypeOf((*MockCollectionRef)(nil).EndBefore), docSnapshotOrFieldValues...)
}

// ID mocks base method.
func (m *MockCollectionRef) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCollectionRefMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCollectionRef)(nil).ID))
}

// Limit mocks base method.
func (m *MockCollectionRef) Limit(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limit", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Limit indicates an expected call of Limit.
func (mr *MockCollectionRefMockRecorder) Limit(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limit", reflect.TypeOf((*MockCollectionRef)(nil).Limit), n)
}

// LimitToLast mocks base method.
func (m *MockCollectionRef) LimitToLast(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LimitToLast", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// LimitToLast indicates an expected call of LimitToLast.
func (mr *MockCollectionRefMockRecorder) LimitToLast(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LimitToLast", reflect.TypeOf((*MockCollectionRef)(nil).LimitToLast), n)
}

// NewDoc mocks base method.
func (m *MockCollectionRef) NewDoc() DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDoc")
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// NewDoc indicates an expected call of NewDoc.
func (mr *MockCollectionRefMockRecorder) NewDoc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDoc", reflect.TypeOf((*MockCollectionRef)(nil).NewDoc))
}

// Offset mocks base method.
func (m *MockCollectionRef) Offset(n int) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Offset", n)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Offset indicates an expected call of Offset.
func (mr *MockCollectionRefMockRecorder) Offset(n any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Offset", reflect.TypeOf((*MockCollectionRef)(nil).Offset), n)
}

// OrderBy mocks base method.
func (m *MockCollectionRef) OrderBy(path string, dir firestore.Direction) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderBy", path, dir)
	ret0, _ := ret[0].(Query)
	return ret0
}

// OrderBy indicates an expected call of OrderBy.
func (mr *MockCollectionRefMockRecorder) OrderBy(path, dir any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderBy", reflect.TypeOf((*MockCollectionRef)(nil).OrderBy), path, dir)
}

// Parent mocks base method.
func (m *MockCollectionRef) Parent() DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parent")
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// Parent indicates an expected call of Parent.
func (mr *MockCollectionRefMockRecorder) Parent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parent", reflect.TypeOf((*MockCollectionRef)(nil).Parent))
}

// Path mocks base method.
func (m *MockCollectionRef) Path() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Path")
	ret0, _ := ret[0].(string)
	return ret0
}

// Path indicates an expected call of Path.
func (mr *MockCollectionRefMockRecorder) Path() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Path", reflect.TypeOf((*MockCollectionRef)(nil).Path))
}

// Select mocks base method.
func (m *MockCollectionRef) Select(paths ...string) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range paths {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockCollectionRefMockRecorder) Select(paths ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockCollectionRef)(nil).Select), paths...)
}

// Snapshots mocks base method.
func (m *MockCollectionRef) Snapshots(ctx context.Context) *firestore.QuerySnapshotIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Snapshots", ctx)
	ret0, _ := ret[0].(*firestore.QuerySnapshotIterator)
	return ret0
}

// Snapshots indicates an expected call of Snapshots.
func (mr *MockCollectionRefMockRecorder) Snapshots(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Snapshots", reflect.TypeOf((*MockCollectionRef)(nil).Snapshots), ctx)
}

// StartAfter mocks base method.
func (m *MockCollectionRef) StartAfter(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAfter", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// StartAfter indicates an expected call of StartAfter.
func (mr *MockCollectionRefMockRecorder) StartAfter(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAfter", reflect.TypeOf((*MockCollectionRef)(nil).StartAfter), docSnapshotOrFieldValues...)
}

// StartAt mocks base method.
func (m *MockCollectionRef) StartAt(docSnapshotOrFieldValues ...any) Query {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range docSnapshotOrFieldValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartAt", varargs...)
	ret0, _ := ret[0].(Query)
	return ret0
}

// StartAt indicates an expected call of StartAt.
func (mr *MockCollectionRefMockRecorder) StartAt(docSnapshotOrFieldValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAt", reflect.TypeOf((*MockCollectionRef)(nil).StartAt), docSnapshotOrFieldValues...)
}

// Where mocks base method.
func (m *MockCollectionRef) Where(path, op string, value any) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Where", path, op, value)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockCollectionRefMockRecorder) Where(path, op, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCollectionRef)(nil).Where), path, op, value)
}
