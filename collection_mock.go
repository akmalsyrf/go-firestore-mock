// Code generated by MockGen. DO NOT EDIT.
// Source: internal/providers/firestore/collection.go
//
// Generated by this command:
//
//	mockgen -source=internal/providers/firestore/collection.go -destination=internal/providers/firestore/collection_mock.go -package=firestore
//
// Package firestore is a generated GoMock package.
package firestore

import (
	context "context"
	reflect "reflect"

	firestore "cloud.google.com/go/firestore"
	gomock "go.uber.org/mock/gomock"
)

// MockCollectionRef is a mock of CollectionRef interface.
type MockCollectionRef struct {
	ctrl     *gomock.Controller
	recorder *MockCollectionRefMockRecorder
}

// MockCollectionRefMockRecorder is the mock recorder for MockCollectionRef.
type MockCollectionRefMockRecorder struct {
	mock *MockCollectionRef
}

// NewMockCollectionRef creates a new mock instance.
func NewMockCollectionRef(ctrl *gomock.Controller) *MockCollectionRef {
	mock := &MockCollectionRef{ctrl: ctrl}
	mock.recorder = &MockCollectionRefMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollectionRef) EXPECT() *MockCollectionRefMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCollectionRef) Add(ctx context.Context, data any) (*firestore.DocumentRef, *firestore.WriteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, data)
	ret0, _ := ret[0].(*firestore.DocumentRef)
	ret1, _ := ret[1].(*firestore.WriteResult)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Add indicates an expected call of Add.
func (mr *MockCollectionRefMockRecorder) Add(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCollectionRef)(nil).Add), ctx, data)
}

// Doc mocks base method.
func (m *MockCollectionRef) Doc(id string) DocumentRef {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Doc", id)
	ret0, _ := ret[0].(DocumentRef)
	return ret0
}

// Doc indicates an expected call of Doc.
func (mr *MockCollectionRefMockRecorder) Doc(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Doc", reflect.TypeOf((*MockCollectionRef)(nil).Doc), id)
}

// Documents mocks base method.
func (m *MockCollectionRef) Documents(ctx context.Context) *firestore.DocumentIterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Documents", ctx)
	ret0, _ := ret[0].(*firestore.DocumentIterator)
	return ret0
}

// Documents indicates an expected call of Documents.
func (mr *MockCollectionRefMockRecorder) Documents(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Documents", reflect.TypeOf((*MockCollectionRef)(nil).Documents), ctx)
}

// Where mocks base method.
func (m *MockCollectionRef) Where(path, op string, value any) Query {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Where", path, op, value)
	ret0, _ := ret[0].(Query)
	return ret0
}

// Where indicates an expected call of Where.
func (mr *MockCollectionRefMockRecorder) Where(path, op, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Where", reflect.TypeOf((*MockCollectionRef)(nil).Where), path, op, value)
}
